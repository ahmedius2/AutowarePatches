diff --git a/sensing/autoware_pointcloud_preprocessor/src/outlier_filter/ring_outlier_filter_node.cpp b/sensing/autoware_pointcloud_preprocessor/src/outlier_filter/ring_outlier_filter_node.cpp
index bf140e6624..5fd449c65c 100644
--- a/sensing/autoware_pointcloud_preprocessor/src/outlier_filter/ring_outlier_filter_node.cpp
+++ b/sensing/autoware_pointcloud_preprocessor/src/outlier_filter/ring_outlier_filter_node.cpp
@@ -47,21 +47,21 @@ RingOutlierFilterComponent::RingOutlierFilterComponent(const rclcpp::NodeOptions
 
   // set initial parameters
   {
-    distance_ratio_ = declare_parameter<double>("distance_ratio");
-    object_length_threshold_ = declare_parameter<double>("object_length_threshold");
-    num_points_threshold_ = declare_parameter<int>("num_points_threshold");
-    max_rings_num_ = static_cast<uint16_t>(declare_parameter<int64_t>("max_rings_num"));
+    distance_ratio_ = declare_parameter<double>("distance_ratio", 1.03);
+    object_length_threshold_ = declare_parameter<double>("object_length_threshold", 0.1);
+    num_points_threshold_ = declare_parameter<int>("num_points_threshold", 4);
+    max_rings_num_ = static_cast<uint16_t>(declare_parameter<int64_t>("max_rings_num", 128));
     max_points_num_per_ring_ =
-      static_cast<size_t>(declare_parameter<int64_t>("max_points_num_per_ring"));
+      static_cast<size_t>(declare_parameter<int64_t>("max_points_num_per_ring", 4000));
 
-    publish_outlier_pointcloud_ = declare_parameter<bool>("publish_outlier_pointcloud");
+    publish_outlier_pointcloud_ = declare_parameter<bool>("publish_outlier_pointcloud", false);
 
-    min_azimuth_deg_ = declare_parameter<float>("min_azimuth_deg");
-    max_azimuth_deg_ = declare_parameter<float>("max_azimuth_deg");
-    max_distance_ = declare_parameter<float>("max_distance");
-    vertical_bins_ = declare_parameter<int>("vertical_bins");
-    horizontal_bins_ = declare_parameter<int>("horizontal_bins");
-    noise_threshold_ = declare_parameter<int>("noise_threshold");
+    min_azimuth_deg_ = declare_parameter<float>("min_azimuth_deg", 0.0);
+    max_azimuth_deg_ = declare_parameter<float>("max_azimuth_deg", 360.0);
+    max_distance_ = declare_parameter<float>("max_distance", 12.0);
+    vertical_bins_ = declare_parameter<int>("vertical_bins", 128);
+    horizontal_bins_ = declare_parameter<int>("horizontal_bins", 36);
+    noise_threshold_ = declare_parameter<int>("noise_threshold", 2);
   }
 
   using std::placeholders::_1;
